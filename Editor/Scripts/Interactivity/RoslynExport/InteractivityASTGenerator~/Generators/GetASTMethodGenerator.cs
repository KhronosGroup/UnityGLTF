using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using System.Text;
using System.Linq;

namespace InteractivityASTGenerator.Generators
{
    /// <summary>
    /// Generates GetAST method for a class
    /// </summary>
    public static class GetASTMethodGenerator
    {
        /// <summary>
        /// Generate the GetAST method for a class
        /// </summary>
        public static string GenerateGetASTMethod(ClassDeclarationSyntax classDeclaration, INamedTypeSymbol classSymbol)
        {
            string namespaceName = classSymbol.ContainingNamespace.ToDisplayString();
            bool isGlobalNamespace = string.IsNullOrEmpty(namespaceName) || namespaceName == "<global namespace>";
            string astNamespace = isGlobalNamespace 
                ? "GLTFInteractivity.AST" 
                : $"{namespaceName}.GLTFInteractivity.AST";
            
            var source = new StringBuilder();
            
            // Add necessary usings
            source.AppendLine("// <auto-generated/>");
            source.AppendLine("using System;");
            source.AppendLine("using System.Collections.Generic;");
            source.AppendLine("using System.Text;");
            source.AppendLine($"using {astNamespace};");  // Reference to our AST namespace
            source.AppendLine();
            
            // Begin namespace for actual class (only if not global)
            if (!isGlobalNamespace)
            {
                source.AppendLine($"namespace {namespaceName}");
                source.AppendLine("{");
            }
            
            string indent = isGlobalNamespace ? "" : "    ";
            
            // Create partial class with appropriate indentation
            source.AppendLine($"{indent}public partial class {classSymbol.Name}");
            source.AppendLine($"{indent}{{");

            // Add GetAST method that returns the ASTNode structure
            source.AppendLine($"{indent}    /// <summary>");
            source.AppendLine($"{indent}    /// Returns the Abstract Syntax Tree representation of this class.");
            source.AppendLine($"{indent}    /// </summary>");
            source.AppendLine($"{indent}    /// <returns>An ASTClass object representing the syntax tree.</returns>");
            source.AppendLine($"{indent}    public static {astNamespace}.ASTClass GetAST()");
            source.AppendLine($"{indent}    {{");
            source.AppendLine($"{indent}        var ast = new {astNamespace}.ASTClass");
            source.AppendLine($"{indent}        {{");
            source.AppendLine($"{indent}            Kind = \"Class\",");
            source.AppendLine($"{indent}            Name = \"{classSymbol.Name}\",");
            source.AppendLine($"{indent}            Modifiers = new List<string> {{ {string.Join(", ", classDeclaration.Modifiers.Select(m => $"\"{m.Text}\""))} }},");
            source.AppendLine($"{indent}            BaseTypes = new List<string> {{ {(classDeclaration.BaseList != null ? string.Join(", ", classDeclaration.BaseList.Types.Select(t => $"\"{t.Type}\"")) : "")} }},");
            
            // Add fields
            source.AppendLine($"{indent}            Fields = new List<{astNamespace}.ASTField>");
            source.AppendLine($"{indent}            {{");
            
            foreach (var field in classDeclaration.DescendantNodes().OfType<FieldDeclarationSyntax>())
            {
                foreach (var variable in field.Declaration.Variables)
                {
                    source.AppendLine($"{indent}                new {astNamespace}.ASTField");
                    source.AppendLine($"{indent}                {{");
                    source.AppendLine($"{indent}                    Kind = \"Field\",");
                    source.AppendLine($"{indent}                    Name = \"{variable.Identifier.Text}\",");
                    source.AppendLine($"{indent}                    Type = \"{field.Declaration.Type}\",");
                    source.AppendLine($"{indent}                    Modifiers = new List<string> {{ {string.Join(", ", field.Modifiers.Select(m => $"\"{m.Text}\""))} }}");
                    source.AppendLine($"{indent}                }},");
                }
            }
            
            source.AppendLine($"{indent}            }},");
            
            // Add properties
            source.AppendLine($"{indent}            Properties = new List<{astNamespace}.ASTProperty>");
            source.AppendLine($"{indent}            {{");
            
            foreach (var property in classDeclaration.DescendantNodes().OfType<PropertyDeclarationSyntax>())
            {
                source.AppendLine($"{indent}                new {astNamespace}.ASTProperty");
                source.AppendLine($"{indent}                {{");
                source.AppendLine($"{indent}                    Kind = \"Property\",");
                source.AppendLine($"{indent}                    Name = \"{property.Identifier.Text}\",");
                source.AppendLine($"{indent}                    Type = \"{property.Type}\",");
                source.AppendLine($"{indent}                    Modifiers = new List<string> {{ {string.Join(", ", property.Modifiers.Select(m => $"\"{m.Text}\""))} }},");
                
                if (property.AccessorList != null)
                {
                    source.AppendLine($"{indent}                    Accessors = new List<string> {{ {string.Join(", ", property.AccessorList.Accessors.Select(a => $"\"{a.Keyword.Text}\""))} }},");
                    
                    // Add accessor bodies
                    source.AppendLine($"{indent}                    AccessorBodies = new List<{astNamespace}.ASTStatement>");
                    source.AppendLine($"{indent}                    {{");
                    
                    foreach (var accessor in property.AccessorList.Accessors)
                    {
                        if (accessor.Body != null)
                        {
                            source.AppendLine($"{indent}                        new {astNamespace}.ASTBlockStatement");
                            source.AppendLine($"{indent}                        {{");
                            source.AppendLine($"{indent}                            Kind = \"AccessorBlock\",");
                            source.AppendLine($"{indent}                            Text = @\"{accessor.Body.ToString().Replace("\"", "\"\"")}\",");
                            source.AppendLine($"{indent}                            Statements = new List<{astNamespace}.ASTStatement>()");
                            source.AppendLine($"{indent}                        }},");
                        }
                        else if (accessor.ExpressionBody != null)
                        {
                            source.AppendLine($"{indent}                        new {astNamespace}.ASTStatement");
                            source.AppendLine($"{indent}                        {{");
                            source.AppendLine($"{indent}                            Kind = \"AccessorExpression\",");
                            source.AppendLine($"{indent}                            Text = @\"{accessor.ExpressionBody.ToString().Replace("\"", "\"\"")}\"");
                            source.AppendLine($"{indent}                        }},");
                        }
                    }
                    
                    source.AppendLine($"{indent}                    }}");
                }
                else
                {
                    source.AppendLine($"{indent}                    Accessors = new List<string>(),");
                    source.AppendLine($"{indent}                    AccessorBodies = new List<{astNamespace}.ASTStatement>()");
                }
                
                source.AppendLine($"{indent}                }},");
            }
            
            source.AppendLine($"{indent}            }},");
            
            // Add methods
            source.AppendLine($"{indent}            Methods = new List<{astNamespace}.ASTMethod>");
            source.AppendLine($"{indent}            {{");
            
            foreach (var method in classDeclaration.DescendantNodes().OfType<MethodDeclarationSyntax>())
            {
                source.AppendLine($"{indent}                new {astNamespace}.ASTMethod");
                source.AppendLine($"{indent}                {{");
                source.AppendLine($"{indent}                    Kind = \"Method\",");
                source.AppendLine($"{indent}                    Name = \"{method.Identifier.Text}\",");
                source.AppendLine($"{indent}                    ReturnType = \"{method.ReturnType}\",");
                source.AppendLine($"{indent}                    Modifiers = new List<string> {{ {string.Join(", ", method.Modifiers.Select(m => $"\"{m.Text}\""))} }},");
                source.AppendLine($"{indent}                    Parameters = new List<{astNamespace}.ASTParameter>");
                source.AppendLine($"{indent}                    {{");
                
                foreach (var parameter in method.ParameterList.Parameters)
                {
                    source.AppendLine($"{indent}                        new {astNamespace}.ASTParameter");
                    source.AppendLine($"{indent}                        {{");
                    source.AppendLine($"{indent}                            Kind = \"Parameter\",");
                    source.AppendLine($"{indent}                            Name = \"{parameter.Identifier.Text}\",");
                    source.AppendLine($"{indent}                            Type = \"{parameter.Type}\"");
                    source.AppendLine($"{indent}                        }},");
                }
                
                source.AppendLine($"{indent}                    }},");
                
                // Add method body
                if (method.Body != null)
                {
                    // Process body statements
                    ASTStatementGenerator.GenerateStatementsAST(method.Body, source, indent + "                    ", astNamespace);
                }
                else if (method.ExpressionBody != null)
                {
                    // Expression-bodied method
                    string expressionText = method.ExpressionBody.ToString().Replace("\"", "\"\"");
                    source.AppendLine($"{indent}                    Body = new List<{astNamespace}.ASTStatement>");
                    source.AppendLine($"{indent}                    {{");
                    source.AppendLine($"{indent}                        new {astNamespace}.ASTStatement");
                    source.AppendLine($"{indent}                        {{");
                    source.AppendLine($"{indent}                            Kind = \"ExpressionBody\",");
                    source.AppendLine($"{indent}                            Text = @\"{expressionText}\",");
                    source.AppendLine($"{indent}                            Expressions = new List<{astNamespace}.ASTExpression>");
                    source.AppendLine($"{indent}                            {{");
                    source.AppendLine($"{indent}                                new {astNamespace}.ASTExpression");
                    source.AppendLine($"{indent}                                {{");
                    source.AppendLine($"{indent}                                    Kind = \"ExpressionBodyExpression\",");
                    source.AppendLine($"{indent}                                    Text = @\"{expressionText}\"");
                    source.AppendLine($"{indent}                                }}");
                    source.AppendLine($"{indent}                            }}");
                    source.AppendLine($"{indent}                        }}");
                    source.AppendLine($"{indent}                    }}");
                }
                else
                {
                    source.AppendLine($"{indent}                    Body = new List<{astNamespace}.ASTStatement>()");
                }
                
                source.AppendLine($"{indent}                }},");
            }
            
            source.AppendLine($"{indent}            }}");
            source.AppendLine($"{indent}        }};");
            source.AppendLine();
            source.AppendLine($"{indent}        return ast;");
            source.AppendLine($"{indent}    }}");
            
            source.AppendLine($"{indent}}}");
            
            if (!isGlobalNamespace)
            {
                source.AppendLine("}");
            }
            
            return source.ToString();
        }
    }
}