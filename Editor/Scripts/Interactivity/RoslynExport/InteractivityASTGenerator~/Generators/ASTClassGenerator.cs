using System.Text;

namespace InteractivityASTGenerator.Generators
{
    /// <summary>
    /// Generates AST classes for a given namespace
    /// </summary>
    public static class ASTClassGenerator
    {
        /// <summary>
        /// Generate AST classes for a specific namespace
        /// </summary>
        public static string GenerateASTClasses(string astNamespace)
        {
            var source = new StringBuilder();
            
            // Add necessary usings
            source.AppendLine("// <auto-generated/>");
            source.AppendLine("using System;");
            source.AppendLine("using System.Collections.Generic;");
            source.AppendLine("using System.Text;");
            source.AppendLine();
            
            // Add the AST classes in their own namespace
            source.AppendLine($"namespace {astNamespace}");
            source.AppendLine("{");
            source.AppendLine("    // ASTNode class hierarchy to represent the syntax tree");
            source.AppendLine("    public class ASTNode");
            source.AppendLine("    {");
            source.AppendLine("        public string Kind { get; set; }");
            source.AppendLine("    }");
            source.AppendLine();
            source.AppendLine("    public class ASTClass : ASTNode");
            source.AppendLine("    {");
            source.AppendLine("        public string Name { get; set; }");
            source.AppendLine("        public List<string> Modifiers { get; set; } = new List<string>();");
            source.AppendLine("        public List<string> BaseTypes { get; set; } = new List<string>();");
            source.AppendLine("        public List<ASTField> Fields { get; set; } = new List<ASTField>();");
            source.AppendLine("        public List<ASTProperty> Properties { get; set; } = new List<ASTProperty>();");
            source.AppendLine("        public List<ASTMethod> Methods { get; set; } = new List<ASTMethod>();");
            source.AppendLine("    }");
            source.AppendLine();
            source.AppendLine("    public class ASTField : ASTNode");
            source.AppendLine("    {");
            source.AppendLine("        public string Name { get; set; }");
            source.AppendLine("        public string Type { get; set; }");
            source.AppendLine("        public List<string> Modifiers { get; set; } = new List<string>();");
            source.AppendLine("    }");
            source.AppendLine();
            source.AppendLine("    public class ASTProperty : ASTNode");
            source.AppendLine("    {");
            source.AppendLine("        public string Name { get; set; }");
            source.AppendLine("        public string Type { get; set; }");
            source.AppendLine("        public List<string> Modifiers { get; set; } = new List<string>();");
            source.AppendLine("        public List<string> Accessors { get; set; } = new List<string>();");
            source.AppendLine("        public List<ASTStatement> AccessorBodies { get; set; } = new List<ASTStatement>();");
            source.AppendLine("    }");
            source.AppendLine();
            source.AppendLine("    public class ASTMethod : ASTNode");
            source.AppendLine("    {");
            source.AppendLine("        public string Name { get; set; }");
            source.AppendLine("        public string ReturnType { get; set; }");
            source.AppendLine("        public List<string> Modifiers { get; set; } = new List<string>();");
            source.AppendLine("        public List<ASTParameter> Parameters { get; set; } = new List<ASTParameter>();");
            source.AppendLine("        public List<ASTStatement> Body { get; set; } = new List<ASTStatement>();");
            source.AppendLine("    }");
            source.AppendLine();
            source.AppendLine("    public class ASTParameter : ASTNode");
            source.AppendLine("    {");
            source.AppendLine("        public string Name { get; set; }");
            source.AppendLine("        public string Type { get; set; }");
            source.AppendLine("    }");
            source.AppendLine();
            source.AppendLine("    public class ASTStatement : ASTNode");
            source.AppendLine("    {");
            source.AppendLine("        public string Text { get; set; }");
            source.AppendLine("        public List<ASTStatement> ChildStatements { get; set; } = new List<ASTStatement>();");
            source.AppendLine("        public List<ASTExpression> Expressions { get; set; } = new List<ASTExpression>();");
            source.AppendLine("    }");
            source.AppendLine();
            source.AppendLine("    public class ASTBlockStatement : ASTStatement");
            source.AppendLine("    {");
            source.AppendLine("        public List<ASTStatement> Statements { get; set; } = new List<ASTStatement>();");
            source.AppendLine("    }");
            source.AppendLine();
            source.AppendLine("    public class ASTExpression : ASTNode");
            source.AppendLine("    {");
            source.AppendLine("        public string Text { get; set; }");
            source.AppendLine("        public string ExpressionType { get; set; }");
            source.AppendLine("        public List<ASTExpression> ChildExpressions { get; set; } = new List<ASTExpression>();");
            source.AppendLine("    }");
            source.AppendLine();
            source.AppendLine("    public class ASTTypeInfo : ASTNode");
            source.AppendLine("    {");
            source.AppendLine("        public string TypeName { get; set; }");
            source.AppendLine("        public string Namespace { get; set; }");
            source.AppendLine("        public bool IsGeneric { get; set; }");
            source.AppendLine("        public List<ASTTypeInfo> TypeArguments { get; set; } = new List<ASTTypeInfo>();");
            source.AppendLine("    }");
            source.AppendLine();
            source.AppendLine("    public class ASTMethodInfo : ASTNode");
            source.AppendLine("    {");
            source.AppendLine("        public string Name { get; set; }");
            source.AppendLine("        public ASTTypeInfo ReturnType { get; set; }");
            source.AppendLine("        public ASTTypeInfo DeclaringType { get; set; }");
            source.AppendLine("        public List<ASTParameterInfo> Parameters { get; set; } = new List<ASTParameterInfo>();");
            source.AppendLine("        public bool IsConstructor { get; set; }");
            source.AppendLine("    }");
            source.AppendLine();
            source.AppendLine("    public class ASTParameterInfo : ASTNode");
            source.AppendLine("    {");
            source.AppendLine("        public string Name { get; set; }");
            source.AppendLine("        public ASTTypeInfo ParameterType { get; set; }");
            source.AppendLine("    }");
            source.AppendLine();
            source.AppendLine("    public class ASTObjectCreationExpression : ASTExpression");
            source.AppendLine("    {");
            source.AppendLine("        public ASTTypeInfo CreatedType { get; set; }");
            source.AppendLine("        public List<ASTExpression> Arguments { get; set; } = new List<ASTExpression>();");
            source.AppendLine("        public List<ASTExpression> Initializers { get; set; } = new List<ASTExpression>();");
            source.AppendLine("    }");
            source.AppendLine();
            source.AppendLine("    public class ASTInvocationExpression : ASTExpression");
            source.AppendLine("    {");
            source.AppendLine("        public ASTMethodInfo MethodInfo { get; set; }");
            source.AppendLine("        public ASTExpression TargetExpression { get; set; }");
            source.AppendLine("        public List<ASTExpression> Arguments { get; set; } = new List<ASTExpression>();");
            source.AppendLine("    }");
            source.AppendLine("}");
            
            return source.ToString();
        }
    }
}